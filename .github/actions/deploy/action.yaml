name: deploy
description: Deploy on AWS S3 Bucket

inputs:
  environment:
    description: 'The Tenant for which the static site will be built'
    required: true
  iam_role:
    description: 'The IAM Role to use to perform the deploy'
    required: true
  bucket:
    description: "The AWS S3 Bucket's name selected as destination"
    required: true
  cloudfront_distribution_id:
    description: 'The ID of the Cloudfront distribution to invalidate'
    required: true
  aws_region:
    description: 'The AWS region selected'
    required: false
    default: 'eu-south-1'
  send_strapi_api_token:
    description: 'The Token to communicate with Strapi'
    required: false
  send_strapi_api_base_url:
    description: 'The API URL to communicate with Strapi'
    required: false
  send_strapi_media_library:
    description: "The name of the AWS S3 Bucket used by SEND's Strapi instance as Media Library"
    required: true
  appio_strapi_api_token:
    description: 'The Token to communicate with Strapi'
    required: false
  appio_strapi_api_base_url:
    description: 'The API URL to communicate with Strapi'
    required: false
  appio_strapi_media_library:
    description: "The name of the AWS S3 Bucket used by APPIO's Strapi instance as Media Library"
    required: true
  demo_strapi_api_token:
    description: 'The Token to communicate with Strapi'
    required: false
  demo_strapi_api_base_url:
    description: 'The API URL to communicate with Strapi'
    required: false
  demo_strapi_media_library:
    description: "The name of the AWS S3 Bucket used by DEMO's Strapi instance as Media Library"
    required: true
  interop_strapi_api_token:
    description: 'The Token to communicate with Strapi'
    required: false
  interop_strapi_api_base_url:
    description: 'The API URL to communicate with Strapi'
    required: false
  interop_strapi_media_library:
    description: "The name of the AWS S3 Bucket used by INTEROP's Strapi instance as Media Library"
    required: true
  cdn_path:
    description: 'The CDN bucket S3 URL'
    required: false

runs:
  using: "composite"
  steps:
    - uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

    - name: Setup Node.JS
      uses: ./.github/actions/setup-node

    - name: Install dependencies
      shell: bash
      run: npm ci

    - name: Compile packages
      shell: bash
      run: npm run compile

    - name: Build static website
      env:
        ENVIRONMENT: ${{ inputs.environment }}
        NEXT_TELEMETRY_DISABLED: "1"
        SEND_STRAPI_API_TOKEN: ${{ inputs.send_strapi_api_token }}
        SEND_STRAPI_API_BASE_URL: ${{ inputs.send_strapi_api_base_url }}
        APPIO_STRAPI_API_TOKEN: ${{ inputs.appio_strapi_api_token }}
        APPIO_STRAPI_API_BASE_URL: ${{ inputs.appio_strapi_api_base_url }}
        DEMO_STRAPI_API_TOKEN: ${{ inputs.demo_strapi_api_token }}
        DEMO_STRAPI_API_BASE_URL: ${{ inputs.demo_strapi_api_base_url }}
        INTEROP_STRAPI_API_TOKEN: ${{ inputs.interop_strapi_api_token }}
        INTEROP_STRAPI_API_BASE_URL: ${{ inputs.interop_strapi_api_base_url }}
        CDN_PATH: ${{ inputs.cdn_path }}
      shell: bash
      run: npm run build -w nextjs-website

    - name: Configure AWS Credentials
      uses: ./.github/actions/configure-aws-credentials
      with:
        aws_region: ${{ inputs.aws_region }}
        role_to_assume: ${{ inputs.iam_role }}

    - name: Deploy to S3 Bucket
      shell: bash
      run: aws s3 sync ./apps/nextjs-website/out s3://${{ inputs.bucket }}/${{ inputs.environment }} --delete

    - name: Copy Media Library Assets - SEND
      shell: bash
      if: ${{ inputs.environment == 'send' }}
      run: aws s3 sync s3://${{ inputs.send_strapi_media_library }} s3://${{ inputs.bucket }}/${{ inputs.environment }}/assets/ --delete --exact-timestamps

    - name: Copy Media Library Assets - APPIO
      shell: bash
      if: ${{ inputs.environment == 'appio' }}
      run: aws s3 sync s3://${{ inputs.appio_strapi_media_library }} s3://${{ inputs.bucket }}/${{ inputs.environment }}/assets/ --delete --exact-timestamps

    - name: Copy Media Library Assets - DEMO
      shell: bash
      if: ${{ inputs.environment == 'demo' }}
      run: aws s3 sync s3://${{ inputs.demo_strapi_media_library }} s3://${{ inputs.bucket }}/${{ inputs.environment }}/assets/ --delete --exact-timestamps

    - name: Copy Media Library Assets - INTEROP
      shell: bash
      if: ${{ inputs.environment == 'interop' }}
      run: aws s3 sync s3://${{ inputs.interop_strapi_media_library }} s3://${{ inputs.bucket }}/${{ inputs.environment }}/assets/ --delete --exact-timestamps

    - name: Create AWS Cloudfront Invalidation
      shell: bash
      run: aws cloudfront create-invalidation --distribution-id ${{ inputs.cloudfront_distribution_id }} --paths "/*" # At the moment we invalidate all the paths
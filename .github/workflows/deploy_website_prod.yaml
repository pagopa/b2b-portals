name: Promote Website to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The Tenant for which the static site will be promoted to production'
        type: choice
        required: true
        options:
          - send
          - appio
          - demo
          - interop

concurrency:
  group: s3-deploy-${{ inputs.environment }}
  cancel-in-progress: false

# These permissions are needed to interact with GitHub's OIDC Token endpoint.
permissions:
  id-token: write
  contents: read

jobs:
  promote-to-prod:
    name: Promote to production S3 - (${{ inputs.environment }})
    runs-on: 'ubuntu-latest'
    environment: ${{ inputs.environment }}

    concurrency:
      group: ${{ github.workflow }}-${{ inputs.environment }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          aws_region: eu-south-1
          role_to_assume: ${{ secrets.IAM_ROLE_DEPLOY_WEBSITE }}

      - name: Generate timestamp
        run: echo "DEPLOY_TIMESTAMP=$(date +'%Y-%m-%d_%H-%M-%S')" >> $GITHUB_ENV

      - name: Sync from staging to production (timestamp)
        shell: bash
        run: aws s3 sync s3://${{ vars.S3_STAGING_BUCKET_NAME }}/${{ inputs.environment }} s3://${{ vars.S3_PROD_BUCKET_NAME }}/${{ inputs.environment }}/${DEPLOY_TIMESTAMP} --delete --exact-timestamps

      - name: Sync from staging to production (latest)
        shell: bash
        run: aws s3 sync s3://${{ vars.S3_STAGING_BUCKET_NAME }}/${{ inputs.environment }} s3://${{ vars.S3_PROD_BUCKET_NAME }}/${{ inputs.environment }}/latest --delete --exact-timestamps

      - name: Create AWS Cloudfront Invalidation
        shell: bash
        run: aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_PROD_DISTRIBUTION_ID }} --paths "/*" # At the moment we invalidate all the paths
  
  notify:
    needs: promote-to-prod
    name: Notify of Workflow End - (${{ inputs.environment }})
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Call Strapi API
        shell: bash
        run: |
          curl -X POST "${{ vars.STRAPI_URL }}/static-deploy/notify-workflow-end" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.WORKFLOW_NOTIFICATIONS_BEARER_TOKEN }}" \
            -d '{"event": "prod-end"}'
name: Promote Website to Production

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'The Tenant for which the static site will be promoted to production'
        type: choice
        required: true
        options:
          - send
          - appio
          - demo
          - interop

# These permissions are needed to interact with GitHub's OIDC Token endpoint.
permissions:
  id-token: write
  contents: read

jobs:
  promote-to-prod:
    name: Promote to production S3 - (${{ inputs.environment }})
    runs-on: 'ubuntu-latest'
    environment: ${{ inputs.environment }}

    concurrency:
      group: ${{ github.workflow }}-${{ inputs.environment }}
      cancel-in-progress: false

    steps:
      - name: Checkout
        uses: actions/checkout@8e5e7e5ab8b370d6c329ec480221332ada57f0ab

      - name: Configure AWS credentials
        uses: ./.github/actions/configure-aws-credentials
        with:
          aws_region: eu-south-1
          role_to_assume: ${{ secrets.IAM_ROLE_DEPLOY_WEBSITE }}
      
      - name: Copy staging site to temp folder
        shell: bash
        run: aws s3 sync s3://${{ vars.S3_STAGING_BUCKET_NAME }}/${{ inputs.environment }} ./tmp-site/
      
      # Touch all files so that sync sees all of them as updated and advances the version of every file in prod
      - name: Touch all files
        shell: bash
        run: find ./tmp-site -type f -exec touch {} +

      - name: Sync from temp folder to production
        shell: bash
        run: aws s3 sync ./tmp-site/ s3://${{ vars.S3_PROD_BUCKET_NAME }}/${{ inputs.environment }} --delete
      
      - name: Set snapshot timestamp
        id: time
        run: echo "timestamp=$(date +%Y-%m-%d_%H-%M-%S)" >> $GITHUB_OUTPUT

      - name: Get object versions from S3
        run: |
          aws s3api list-object-versions \
            --bucket ${{ vars.S3_PROD_BUCKET_NAME }} \
            --prefix ${{ inputs.environment }}/ > versions.json

      - name: Extract latest versions into snapshot
        run: |
          jq -r '
            [
              (.Versions[] | select(.IsLatest == true)),
              (.DeleteMarkers[] | select(.IsLatest == true))
            ]
            | map("\(.Key) \(.VersionId)")
            | .[]
          ' versions.json > "${{ steps.time.outputs.timestamp }}.txt"

      - name: Upload snapshot to S3
        run: |
          aws s3 cp \
            "${{ steps.time.outputs.timestamp }}.txt" \
            s3://${{ vars.S3_PROD_BUCKET_NAME }}/deploys/${{ inputs.environment }}/${{ steps.time.outputs.timestamp }}.txt

      - name: Create AWS Cloudfront Invalidation
        shell: bash
        run: aws cloudfront create-invalidation --distribution-id ${{ vars.CLOUDFRONT_PROD_DISTRIBUTION_ID }} --paths "/*" # At the moment we invalidate all the paths
  
  notify:
    needs: promote-to-prod
    name: Notify of Workflow End - (${{ inputs.environment }})
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Call Strapi API
        shell: bash
        run: |
          curl -X POST "${{ vars.STRAPI_URL }}/static-deploy/notify-workflow-end" \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer ${{ secrets.WORKFLOW_NOTIFICATIONS_BEARER_TOKEN }}" \
            -d '{"event": "prod-end"}'